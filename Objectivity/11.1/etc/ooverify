#!/space/insttest/linux86gcc3/etc/ooperl -I/tmp/cdrom/perl5/5.8.4/linux86gcc3-linux -I/tmp/cdrom/perl5/5.8.4 -I/tmp/cdrom/perl5/site_perl/5.8.4/linux86gcc3-linux -I/tmp/cdrom/perl5/site_perl/5.8.4 -I/tmp/cdrom/perl5/site_perl/5.8.0/linux86gcc3-linux -I/tmp/cdrom/perl5/site_perl/5.8.0 -I/tmp/cdrom/perl5/site_perl/5.6.0 -I/tmp/cdrom/perl5/site_perl -I.
#
# ooverify - Objectivity Product Verification script
#
#                   Copyright (c) 2001 Objectivity, Inc.
#                         All Rights Reserved
#
#       THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF OBJECTIVITY, INC.
#
#       The copyright notice above does not evidence any
#       actual or intended publication of such source code.

$| = 1;
undef $/;
#
# Display the usual Objy title.
#

print "\nObjectivity (TM) UNIX Installation verification Script\n";
print "Copyright (c) Objectivity, Inc. 2001. All rights reserved.\n\n";

#
# Find the installation directory to verify
#

use Digest::MD5;

$install_dir = `pwd`;
$install_dir =~ s/\n//;
$install_dir =~ s/\/(\w*)\/etc//;
$arch = $1;
print "Executing \'$install_dir/$arch/etc/ooverify\' for $arch.\n";

chdir "$install_dir/$arch/etc";
undef @manifest_check;
@manifest_check = <manifest.*>;
if ( @manifest_check == 0 ) {
  # Try CAPS
  @manifest_check = <MANIFEST.*>;
}
if ( $manifest_check[0] ) {
	$FIRST_TIME = 1;
	$FIX = 1;
	if ( -e "$install_dir/$arch/etc/verify.manifest" ) {
		print "An earlier\, failed attempt to run ooverify has been detected.  Removing \nold files.\n";
		if ( `rm -f $install_dir/$arch/etc/verify.manifest` ) {
			die "Could not remove prior verify files - $!\n";
		}
	}
} else {
	$FIRST_TIME = 0;
	if ($ARGV[0] eq "--fix") {
		$FIX = 1;
	} else {
		$FIX = 0;
	}
}

if ($FIRST_TIME) {
        open (MANIFEST_OUT,">$install_dir/$arch/etc/verify.manifest") || die "Major error:\n\tCould not create manifest file \n\t$install_dir/$arch/etc/verify_manifest: $!\nHierarchy is bad\n";
        push @manifest_check,"ALTERNATES";
} else {
        push @manifest_check,"verify.manifest";
}

$minor_errors=0;
$major_errors=0;

undef $component_name;
undef %major_error_component;
undef %minor_error_type;
undef %major_error_type;
foreach ( @manifest_check) {
	open (MANIFEST_IN,$_) || die "Couldn't open $_: $!\n";
	if ( $_ eq "ALTERNATES" ) {
		$link = 1;
		print "\n\nVerifying post-install tasks.\n\n";
	} else {
		if ($FIRST_TIME) {
			$component_name = $_;
			$component_name =~ s/manifest\.//;
			print "\nBeginning verify of component $component_name.\n";
		}
	}
	foreach (split /\n/s, <MANIFEST_IN>) {
		unless ( $link ) {
			($checknameshort,$checkmode,$checksum,$directory) = /(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/;
			$checkname = "$install_dir/$arch/$checknameshort";
			unless ( $FIRST_TIME ) {
				$component_name = $4;
				if ($checksum) { 
					$directory = 0;
				} else {
					$directory = 1;
				}
			}
			unless ( -e $checkname ) {
				$major_error_type{"Missing File"} = "y";
				$major_errors = 1;
				$major_error_component{$component_name} = "y";
				print "\nFile not found: $checkname.\n";
				next;
			}
			($foo1,$foo2,$filemode,$foo4,$fileowner) = stat ($checkname);

#
# Check file mode
#
			unless (oct($filemode) == oct($checkmode) ) {
				if ( $FIX ) {
					chmod ((oct $checkmode),$checkname);
				} else {
					$minor_errors = 1;
					$minor_error_type{"Wrong access mode"} = "y";
				}
			}
#
# Checksum
#
			unless ( $directory ) {
				unless ( -r $checkname ) {
					$minor_errors = 1;
					$minor_error_type{"Files cannot be read to check checksum"} = "y";
					next;
				}
				open FILESUM,$checkname;
				binmode(FILESUM);
                $currsum = Digest::MD5->new->addfile(*FILESUM)->hexdigest;
				close FILESUM;
				unless ( $currsum == $checksum ) {
					$minor_errors = 1;
					$minor_error_type{"Files with the wrong checksum"} = "y";
					$minor_error_component{$component_name} = "y";
					print "\nFile $checkname checksum incorrect - was $currsum, should be $checksum.\n";
					next;
				}
			} else {
				unless ( -d $checkname) {
					$major_errors = 1;
					$major_error_type{"Missing directories (contents not checked)"} = "y";
					$major_error_component{$component_name} = "y";
					print "\nDirectory $checkname not found!\n";
					next;
				}
			}
			if ($FIRST_TIME) {
				print MANIFEST_OUT "$checknameshort\t$checkmode\t$checksum\t$component_name\n";
			}
			print ( ($directory == 1) ? "/" : ".");
		} else {
			($fullname,$fullcomp,$stubname,$stubcomp,$mode) = /(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/;
			if ($fullname ) {	# <- Do stub parsing
				$realfullname = "$install_dir/$arch/$fullname";
				$realstubname = "$install_dir/$arch/$stubname";
				if ( -e $realfullname || -e $realstubname ) {
					unless (-e $realfullname) {
						`mv -f $realstubname $realfullname`;
						$fullcomp = $stubcomp;
					}
					open CHECKSUM,$realfullname;
					binmode(CHECKSUM);
					$checksum = Digest::MD5->new->addfile(*CHECKSUM)->hexdigest;
					close CHECKSUM;
					print MANIFEST_OUT "$fullname\t$mode\t$checksum\t$fullcomp\n";
					`rm -f $realstubname`;
				}
			} else {		# <- Do symlink parsing
				unless ( /(\S+)\s+(\S+)\s+(\S+)/ ) {
					$minor_errors = 1;
					$minor_error_type{"Bad format in manifest file"} = "y";
					print "\nBad format in file ALTERNATES, might be a manufacturing error.\n";
					next;
				}
				$symsource = $1;
				$symdest = $2;
				foreach ( @manifest_check ) {
					if (/\.$3$/) {
						if (link("$install_dir/$arch/$symsource","$install_dir/$arch/$symdest")) {
							if(symlink("$install_dir/$arch/$symsource","$install_dir/$arch/$symdest")) {
								print "Unable to create symlink: $!\n";
								exit 1;
							}
						}
					}
				}
			}
		}
	}
	close MANIFEST_IN;
}
if ( $FIRST_TIME ) {
	close MANIFEST_OUT;
	unless ($major_errors) {
		unlink @manifest_check; 
	} else {
		# installer should trap for this and clean the tree
		if ($major_errors) {
			print "Major errors occurred:\n";
			foreach ( keys (%major_error_type) ) {
			print "\t$_\n";
		}
		print "Hierarchy is bad.  Please reinstall the following components:\n\t";
		print keys(%major_error_component);
		print "\n";
		}
		`touch $install_dir/$arch/VERIFY_FAILED`;
		exit 1; 
	}
}
if ($minor_errors) {
        print "Minor errors occurred:\n";
        foreach ( keys (%minor_error_type) ) {
                print "\t$_\n";
        }
        print "Hierarchy is good, though you may wish to test the following before use:\n\t";
        print keys(%minor_error_component);
        print "\n";
}

